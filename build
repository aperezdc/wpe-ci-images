#! /bin/zsh
emulate -L zsh
setopt multios err_return

# Make sure no aliases are defined. At all.
unalias -a -s

# Automatically pick helpers from the functions/ subdir.
fpath="${0:A:h}/functions" autoload -RUz "${0:A:h}/functions"/*(.:t)

# Handle all the ': require ...' lines.
declare -a required=()
declare -a line
while read -A line ; do
	[[ ${#line} -gt 2 && ${(f)line[1,2]} = :\ require ]] || continue
	required+=( "${(@)line[3,-1]}" )
done < "${0:A:h}/functions"/*(.)

require "${(u)required[@]}"
require pigz tar fakeroot fakechroot gpg

unset line
unset required

zmodload zsh/zutil
zmodload zsh/stat

# Parse command line options.
declare -a PKGLIST_DEFINES
declare -a pkglist_files
declare -a json_configs
declare -A OPTS=()

zparseopts -A OPTS -D -M -E \
	h -help=h \
	N -noprogressbar=N \
	o: -output:=o \
	D+:-=PKGLIST_DEFINES -define+:-=D \
	p+:-=pkglist_files -pkglist+:-=p \
	C+:-=json_configs -image-config+:-=C

pkglist_files=( "${pkglist_files[@]#-p}" )
json_configs=( "${json_configs[@]#-C}" )

if [[ ${OPTS[-h]+set} = set ]] ; then
	show-help "${0}" 0
fi

declare -a packages=( "$@" )
if [[ ${#pkglist_files} -gt 0 ]] ; then
	packages=( $(pkglist "${pkglist_files[@]}") "$@" )
fi

[[ -n ${OPTS[-o]} ]] || die 'No image output path specified'
[[ ${#packages} -gt 0 ]] || die 'No packages specified'

declare -r O=${OPTS[-o]}
declare -r rootfs_path="${O}/rootfs"
declare -r blobs_path="${O}/blobs"
declare -r cache_path="${O}/cache"
declare -r tools_path="${0:A:h}/tools"

declare -a mounts=( )
declare -A mounts_fuse=( )

declare -a pacman_args=( )

if [[ ${OPTS[-N]+set} = set ]] ; then
	pacman_args+=(--noprogressbar)
fi


function mounts-cleanup
{
	local dst
	for dst in "${(aO@)mounts}" ; do
		if [[ ${mounts_fuse["${dst}"]} = true ]] ; then
			echo ":: umount-fuse: ${dst}"
			fusermount -u "${dst}"
		else
			echo ":: umount: ${dst}"
			umount "${dst}"
		fi
	done
	mounts_fuse=( )
	mounts=( )
}


trap mounts-cleanup EXIT QUIT INT


function mount-available
{
	if [[ -x ${tools_path}/chkcap ]] ; then
		"${tools_path}/chkcap" "$$" cap_sys_admin
	else
		[[ ${UID} -eq 0 || ${EUID} -eq 0 ]]
	fi
}


function fuse-available
{
	local fusermount_path=$(whence -p fusermount)
	[[ -r /dev/fuse && -w /dev/fuse && -n ${fusermount_path} ]]
}


function fs-bind
{
	local src=${1:A}
	local dst=${2:A}

	if [[ -n ${BUILD_NOMOUNT} && ${BUILD_NOMOUNT} -ne 0 ]] ; then
		echo ":: skip-mount: ${src} ${dst}"
		return
	fi

	if [[ ! -d ${src} ]] ; then
		die "No such directory: ${src}"
	fi

	if mount-available ; then
		# Use normal mounts.
		echo ":: bind-mount: ${src} ${dst}"
		mkdir -p "${dst}"
		if mount --bind "${src}" "${dst}" ; then
			mounts+=("${dst}")
			return
		else
			return $?
		fi
	fi

	if fuse-available ; then
		local bindfs_path=$(whence -p bindfs)
		if [[ -n ${bindfs_path} ]] ; then
			echo ":: bindfs-mount: ${src} ${dst}"
			mkdir -p "${dst}"
			# TODO: Add package in imagebuild.pkglist
			if bindfs --chown-ignore --chgrp-ignore --xattr-none \
				--delete-deny --rename-deny --resolve-symlinks --no-allow-other \
				"${src}" "${dst}"
			then
				mounts_fuse["${dst}"]=true
				mounts+=("${dst}")
			fi
			return $?
		fi
	fi

	echo "Skipped: fs-bind ${src} ${dst}"
}


function fake-init
{
	: > "${O}/faked.state"
}

function fake
{
	echo ":: fake: $*"
	fakechroot -e none -- fakeroot -i "${O}/faked.state" -s "${O}/faked.state" -- "$@"
}


function gpg-pacman
{
	local homedir="${O}/rootfs/etc/pacman.d/gnupg"

	if [[ ! -r ${homedir}/gpg.conf ]] ; then
		> "${homedir}/gpg.conf" <<-EOF
		no-greeting
		no-permission-warning
		lock-never
		keyserver hkp://pool.sks-keyservers.net
		keyserver-options timeout=10
		EOF
	fi

	if [[ ! -r ${homedir}/gpg-agent.conf ]] ; then
		> "${homedir}/gpg-agent.conf" <<-EOF
		disable-scdaemon
		EOF
	fi

	if [[ ! -r ${homedir}/pubring.gpg || ! -r ${homedir}/secring.gpg ]] ; then
		touch "${homedir}"/{pub,sec}ring.gpg
		chmod 644 "${homedir}/pubring.gpg"
		chmod 600 "${homedir}/secring.gpg"
		gpg-pacman --update-trustdb
	fi

	LANG=C gpg \
		--homedir "${homedir}" \
		--options "${homedir}/gpg.conf" \
		--no-permission-warning "$@"
}


if [[ ! -r ${rootfs_path}.done ]] ; then
	rm -rf "${rootfs_path}"
	mkdir -p \
		"${rootfs_path}"/var/{cache/pacman/pkg,lib/pacman,log} \
		"${rootfs_path}/etc/pacman.d/gnupg" \
		"${cache_path}"
	fake-init

	# Empty log, create Pacman configuration files.
	echo ':: Generating mirror list...'
	reflector --protocol https --score 5 > "${O}/mirrorlist"
	gen-pacman-conf "${O}/mirrorlist" > "${O}/pacman.conf"
	: > "${O}/pacman.log"

	# Initialize PGP keyring.
	echo ':: Initializing Pacman PGP keyring...'
	gpg-pacman --gen-key --batch <<-EOF
	%echo Generating pacman keyring master key...
	Key-Type: RSA
	Key-Length: 2048
	Key-Usage: sign
	Name-Real: Pacman Keyring Master Key
	Name-Email: pacman@localhost
	Expire-Date: 0
	%no-protection
	%commit
	%echo Done
	EOF

	# Populate PGP keyring.
	echo 'Importing PGP keys...'
	gpg-pacman --quiet --import /usr/share/pacman/keyrings/archlinux.gpg

	typeset -A keyids=( )
	while IFS=: read -r keyid level ; do
		if [[ ${keyid} = \#* ]] ; then
			continue
		fi
		keyids[${keyid}]=${level}
	done < /usr/share/pacman/keyrings/archlinux-trusted

	for keyid in "${(k@)keyids}" ; do
		echo ":: Signing ${keyid}"
		gpg-pacman --command-fd 0 --batch --quiet --lsign-key "${keyid}" &> /dev/null <<-EOF
		y
		y
		EOF
		gpg-pacman --command-fd 0 --batch --quiet --edit-key "${keyid}" &> /dev/null <<-EOF
		trust
		${keyids[${keyid}]}
		quit
		EOF
	done

	keyids=( )
	while read -r keyid ; do
		keyids[${keyid}]=1
	done < /usr/share/pacman/keyrings/archlinux-revoked

	for keyid in "${(k@)keyids}" ; do
		echo ":: Disabling ${keyid}"
		gpg-pacman --command-fd 0 --batch --quiet --edit-key "${keyid}" &> /dev/null <<-EOF
		disable
		quit
		EOF
	done

	echo ':: Updating PGP trustdb...'
	gpg-pacman --command-fd 0 --batch --update-trustdb &> /dev/null < <( while true ; do echo 4 ; done )

	echo ':: Setting PGP keyring permissions...'
	fake chown -R 0:0 "${rootfs_path}/etc/pacman.d/gnupg"

	fs-bind /dev "${rootfs_path}/dev"
	fs-bind /sys "${rootfs_path}/sys"
	fs-bind /proc "${rootfs_path}/proc"

	fake pacman -Sy "${pacman_args[@]}" \
		--root "${rootfs_path}" \
		--cachedir "${cache_path}" \
		--logfile "${O}/pacman.log" \
		--config "${O}/pacman.conf" \
		--gpgdir "${rootfs_path}/etc/pacman.d/gnupg" \
		--noconfirm "${packages[@]}"

	mounts-cleanup

	touch "${rootfs_path}.done"
	rm -f "${rootfs_path}.tar.sum" "${rootfs_path}.tar.gz.sum"
fi

if [[ ! -r ${rootfs_path}.tar.sum ]] ; then
	read -r rootfs_size dummy < <(du -s "${rootfs_path}/")
	echo ":: Packaging rootfs..."
	fake tar -C "${rootfs_path}" -cpf "${rootfs_path}.tar" .
	sha256 "${rootfs_path}.tar" > "${rootfs_path}.tar.sum"
	rm -f "${rootfs_path}.tar.gz.sum"
fi

if [[ ! -r ${rootfs_path}.tar.gz.sum ]] ; then
	echo ":: Compressing rootfs..."
	pigz -9f "${rootfs_path}.tar"
	sha256 "${rootfs_path}.tar.gz" > "${rootfs_path}.tar.gz.sum"
fi


# FIXME: Un-hardcode os/architecture.
echo ':: Generating image JSON configuration...'
json-merge =(gen-image-conf-base linux amd64 "$(< "${rootfs_path}.tar.sum")") \
	"${json_configs[@]}" > "${O}/config.json"
sha256 "${O}/config.json" > "${O}/config.json.sum"

mkdir -p "${blobs_path}"
echo 'Directory Transport Version: 1.1' > "${blobs_path}/version"
ln -f "${rootfs_path}.tar.gz" "${blobs_path}/$(< "${rootfs_path}.tar.gz.sum")"
ln -f "${O}/config.json" "${blobs_path}/$(< "${O}/config.json.sum")"

> "${blobs_path}/manifest.json" <<EOF
{
	"schemaVersion": 2,
	"mediaType": "application/vnd.docker.distribution.manifest.v2+json",
	"config": {
		"mediaType": "application/vnd.docker.container.image.v1+json",
		"digest": "sha256:$(< "${O}/config.json.sum")",
		"size": $(zstat +size "${O}/config.json")
	},
	"layers": [
		{
			"mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
			"digest": "sha256:$(< "${rootfs_path}.tar.gz.sum")",
			"size": $(zstat +size "${rootfs_path}.tar.gz")
		}
	]
}
EOF

echo ':: Done'
